1.display函数
/*
display函数
 
1.输入变量，及其意义：
 	int penSize		笔的粗细 
	char *font		字体格式 
	int pointSize	字体大小 
	char *penColor	字体颜色 
 2.无返回值 
 3.实现的功能，将 buffFile文件指针所指向文件内的内容打印出来（无法支持汉字，无法直接单行溢出） 
 4.需要用到的头文件："graphics.h" 
   需要用到的全局变量： FILE *buffFile;
 5.待优化的功能 
 
  (字体大小待改进为平凡大小)	 字体大小设置为四种：10、20、30、40 
 （很奇怪库里的那个pointsize和呈现窗口的单位长度不对应，所以realPointSize数据为人工测试所得……） 
 
  (输出待改进为兼容汉字)	现在无法正常输出缓冲文件中的汉字 
 
 6.测试函数 
 
 FILE *buffFile;
 void Main(){
	InitGraphics();
	buffFile = fopen("buffFile.txt","a+"); 
	display(1,"微软雅黑",20,"Red");
}
 
*/ 
void display(int penSize,char *font,int pointSize,char *penColor) //笔的粗细，字体格式，字体大小，字体颜色 
{
	
	char ch;
	double x = GetWindowWidth(); 
	double y = GetWindowHeight();
	double realPointSize = 0; //实际呈现时字体对应的长度 
	SetPointSize(pointSize);
	SetFont(font);
	SetPenSize(penSize);
	SetPenColor(penColor);
	int row = 1; //已显示的行数 
	int cnt = 0; //一行内的字符数 
	char word[1000];//现在即将输入行内容 
	
	switch(pointSize){
		case 10: realPointSize = 0.14; break;
		case 20: realPointSize = 0.22; break;
		case 30: realPointSize = 0.27; break;
		case 40: realPointSize = 0.38; break;
	}
	MovePen(0,y-realPointSize);
	memset(word, 0, sizeof(word));
	
	//复制数据，结束条件为光标移至文件末 
	while(!feof(buffFile)){
		//读取光标下一个字符 
		ch = fgetc(buffFile);
		//读取到换行标识 
		if(ch == '\n'){
			//将当前的word内内容输出，并改变row和cnt数 
			DrawTextString(word);
			//移动笔 
			MovePen(0,y-realPointSize*(row+1));
			row ++;
			memset(word, 0, sizeof(word));
			cnt = 0;
		}
		//读取到非换行 
		else{
			//将该值存储于word内以待输出 
			word[cnt++] = ch;
		}
	} 
	
}

2.Count函数
    /*
    Count函数
    
    1.无输入变量
    2.返回值：
    类型为int   意义：文件中内容的最大行数
    3.实现的功能，将文件buffFile中内容导入到全局变量charCount[]中，方便光标移动
    4.需要用到的全局变量： 
        FILE *buffFile;
        int charCount[];
    5.待优化的功能 
    
    6.测试函数 
    #include<stdio.h>
    #include<stdlib.h>
    FILE *buffFile;
    int charCount[1000];
    int Count();
    int main(){
        buffFile = fopen("buffFile.txt","a+");
        int count;
        count = Count();
        for(int i=1;i<=count;i++){
            printf("%d\n",charCount[i]);
    }
    return 0;
}
    
    */ 


    int Count() 
    {
        //这个是每一行的计数个数
        int i = 0;
        //这个是在数行
        int j = 1;
        //开始数
        fseek(buffFile,0,0);
        //过度字符
        char ch = 1;
        while(!feof(buffFile)){
            ch = fgetc(buffFile);
            //如果字符为EOF，就说明结束了
            if( ch == EOF){
                charCount[j] = i;
                return j;
            }
            //如果字符为\n，说明该跳转下一行了
            else if( ch == '\n'){
                //赋值
                charCount[j] = i;
                //计数清零
                i = 0;
                //行数跳转下一个
                j++;
            }
            //其他情况计数+1
            else    i++;
        }
    //如果因为读取到文件末尾了，也说明结束了
    charCount[j] = i;
    return j;
    }



3.Copy函数
/*
 Copy函数
 
 1.无输入变量
 2.无返回值
 3.实现的功能，将指针标出的字符复制到clipBoard文件中
 4.需要用到的全局变量： 
    FILE *buffFile;
    FILE *clipBoard;
    int cursorBegin;
    int cursorTail;
 5.待优化的功能 
 
 6.测试函数 
#include<stdio.h>
#include<stdlib.h>
FILE *buffFile;
FILE *clipBoard;
int cursorBegin;
int cursorTail;
void Copy();
int main(){
    buffFile = fopen("buffFile.txt","a+");
    cursorBegin = 1;
    cursorTail = 10;
    //cursorTail = 1;
    Copy();
    return 0;
}

}
 
*/ 

void Copy() 
{
    //打开剪切板（因为定义为随用随开，保证关闭）
	clipBoard = fopen( "clipBoard.txt", "w");
    //先找到想开始复制的开头
    fseek(buffFile,cursorBegin,0);
    //这是调试出的问题（我真傻，连个fseek都不会用。。。。
    //fseek( buffFile, 0, cursorBegin);
    //找出需要复制的文本长度
    int length = cursorTail - cursorBegin;
    //这里加个判断吧，如果头尾一致的话，就当你没按
    if(length == 0)	return;
    //定义一个过渡字符
    char temp;
    //将需要的字符串读入clipBoard
    while( length){
        temp = fgetc( buffFile);
        fputc( temp, clipBoard);
        length--;
    }
    //大功告成
    return;
}


4.Write函数

Write函数
 
 1.输入变量，及其意义：
 	char inputChar;//输入的字符（一般放在键盘相应事件中，作为输入） 
 2.无返回值 
 3.实现的功能，将光标选中的内容在buffFile中删除，并将输入的字符添加到光标所在位置。
 4.需要用到的函数：void Delete();
   需要用到的全局变量： FILE *buffFile;
   						int cursorBegin;
   						int cursorTail;
 5.待优化的功能 
 

 6.测试函数 
#include<stdio.h>
#include<stdlib.h>
FILE *buffFile;
int cursorBegin;
int cursorTail;
void Write(char inputChar);
void Delete();
int main(){
    buffFile = fopen("buffFile.txt","a+");
    cursorBegin = 2;
    cursorTail = 4;
    //cursorTail = 1;
    char ch;
    ch = '?';
    Write(ch);
}

void Delete() 
{
	//一个过渡缓冲文件 
	FILE *tempFile = fopen("tempFile.txt","w");
	//如果光标在文件头，直接返回 
	if(cursorTail == 0)	return;
	//如果光标未选中，将光标头前移一个，默认删除前一个 
	if(cursorBegin == cursorTail)	cursorBegin--;
	char ch = 1;//缓冲字符 
	int i = 0;//计数光标位置 
	while( !feof(buffFile)){
		//如果碰到选中区域，直接跳过 
		if( i == cursorBegin ){
			i = cursorTail;
			continue;
		}
		//每一次都刷新一下文件光标，确保要读取的是需要的字符 
		fseek(buffFile,i,0);
		//读取buff File中的字符 
		ch = fgetc(buffFile);
		//判断一下，如果是EOF说明读完了
		if(ch == EOF)	break; 
		//输出给temp 
		fputc(ch,tempFile);
		//手动将光标后移 
		i++;
	}
	//将buffFile刷新一遍，将temp的内容读进去 
	fclose(tempFile);
	fclose(buffFile);
	buffFile = fopen("buffFile.txt","w+");
	tempFile = fopen("tempFile.txt","r");
	while(!feof(tempFile)){
		//从tempFile中开始读取 
		ch = getc(tempFile);
		//如果是EOF说明读完了 
		if(ch == EOF)	break;
		//赋给buffFile
		putc(ch,buffFile); 
	}
	//用完文件就关好习惯
	fclose(tempFile); 
	//将光标末尾和光标头统一（因为中间的已经删除）
	cursorTail = cursorBegin;	
}

}
 
*/ 
void Write(char inputChar) 
{
	//如果有选中的内容，就直接删除先
	if(cursorBegin<cursorTail)	Delete();
	
	//下面开始通过缓冲文件将该字符加入 
	//一个过渡缓冲文件 
	FILE *tempFile = fopen("tempFile.txt","w");
	char ch = 1;//缓冲字符
	int i=0;//计数光标位置 
	while( !feof(buffFile)){
		//如果碰到选中区域，就将字符加进去 
		if( i == cursorBegin )	fputc(inputChar,tempFile);
		//每一次都刷新一下文件光标，确保要读取的是需要的字符 
		fseek(buffFile,i,0);
		//读取buff File中的字符 
		ch = fgetc(buffFile);
		//判断一下，如果是EOF说明读完了
		if(ch == EOF)	break; 
		//输出给temp 
		fputc(ch,tempFile);
		//手动将光标后移 
		i++;
	}
	//将buffFile刷新一遍，将tempFile的内容读进去 
	fclose(tempFile);
	fclose(buffFile);
	buffFile = fopen("buffFile.txt","w+");
	tempFile = fopen("tempFile.txt","r");
	while(!feof(tempFile)){
		//从tempFile中开始读取 
		ch = getc(tempFile);
		//如果是EOF说明读完了 
		if(ch == EOF)	break;
		//赋给buffFile
		putc(ch,buffFile); 
	}
	//用完文件就关好习惯
	fclose(tempFile); 
	//由于加入了一个字符，光标应该要往后一个
	cursorBegin++;
	cursorTail++; 
}



5.Cut函数

Cut函数
 
1.输入变量，及其意义：
 	//可能要用到键盘输入，暂缓 
 2.无返回值 
 3.实现的功能，将选中的内容在buffFile中删除 
 4.需要用到的头文件："graphics.h" 
   需要用到的全局变量： FILE *buffFile;
   						FILE *clipBoard;
   						int cursorBegin;
   						int cursorTail;
 5.待优化的功能 
 

 6.测试函数 
#include<stdio.h>
#include<stdlib.h>
FILE *buffFile;
FILE *clipBoard;
int cursorBegin;
int cursorTail;
void Delete();
void Cut();
void Copy();
int main(){
    buffFile = fopen("buffFile.txt","a+");
	clipBoard = fopen("clipBoard.txt","w");
    cursorBegin = 2;
    cursorTail = 4;
    //cursorTail = 1;
    Cut();
}

void Delete() 
{
	//一个过渡缓冲文件 
	FILE *tempFile = fopen("tempFile.txt","w");
	//如果光标在文件头，直接返回 
	if(cursorTail == 0)	return;
	//如果光标未选中，将光标头前移一个，默认删除前一个 
	if(cursorBegin == cursorTail)	cursorBegin--;
	char ch = 1;//缓冲字符 
	int i = 0;//计数光标位置 
	while( !feof(buffFile)){
		//如果碰到选中区域，直接跳过 
		if( i == cursorBegin ){
			i = cursorTail;
			continue;
		}
		//每一次都刷新一下文件光标，确保要读取的是需要的字符 
		fseek(buffFile,i,0);
		//读取buff File中的字符 
		ch = fgetc(buffFile);
		//判断一下，如果是EOF说明读完了
		if(ch == EOF)	break; 
		//输出给temp 
		fputc(ch,tempFile);
		//手动将光标后移 
		i++;
	}
	//将buffFile刷新一遍，将temp的内容读进去 
	fclose(tempFile);
	fclose(buffFile);
	buffFile = fopen("buffFile.txt","w+");
	tempFile = fopen("tempFile.txt","r");
	while(!feof(tempFile)){
		//从tempFile中开始读取 
		ch = getc(tempFile);
		//如果是EOF说明读完了 
		if(ch == EOF)	break;
		//赋给buffFile
		putc(ch,buffFile); 
	}
	//用完文件就关好习惯
	fclose(tempFile); 
	//将光标末尾和光标头统一（因为中间的已经删除）
	cursorTail = cursorBegin;	
}

}
 
*/ 
void Cut() 
{
	//如果未选中字符串，则直接返回 
	if(cursorBegin == cursorTail)	return;
	//先将相关字符串复制，再删除字符串 
	Copy();
	Delete();

6.Paste函数

Paste函数
 
 1.无需要输入的变量：
 2.无返回值 
 3.实现的功能，将选中的内容在buffFile中删除，将clipBoard里的内容在光标处加入到buffFile中
 4.需要用到的函数：void Write(char);
                void Delete();
   需要用到的全局变量：FILE *buffFile;
   					FILE *clipBoard;
   					int cursorBegin;
   					int cursorTail;
 5.待优化的功能 
 

 6.测试函数 
#include<stdio.h>
#include<stdlib.h>
FILE *buffFile;
FILE *clipBoard;
int cursorBegin;
int cursorTail;
void Write(char);
void Paste();
void Delete();

int main(){
    buffFile = fopen("buffFile.txt","a+");
	clipBoard = fopen("clipBoard.txt","r");
    cursorBegin = 1;
    //cursorTail = 4;
    cursorTail = 1;
    Paste();
}

void Write(char inputChar) 
{
	//如果有选中的内容，就直接删除先
	if(cursorBegin<cursorTail)	Delete();
	
	//下面开始通过缓冲文件将该字符加入 
	//一个过渡缓冲文件 
	FILE *tempFile = fopen("tempFile.txt","w");
	char ch = 1;//缓冲字符
	int i=0;//计数光标位置 
	while( !feof(buffFile)){
		//如果碰到选中区域，就将字符加进去 
		if( i == cursorBegin )	fputc(inputChar,tempFile);
		//每一次都刷新一下文件光标，确保要读取的是需要的字符 
		fseek(buffFile,i,0);
		//读取buff File中的字符 
		ch = fgetc(buffFile);
		//判断一下，如果是EOF说明读完了
		if(ch == EOF)	break; 
		//输出给temp 
		fputc(ch,tempFile);
		//手动将光标后移 
		i++;
	}
	//将buffFile刷新一遍，将tempFile的内容读进去 
	fclose(tempFile);
	fclose(buffFile);
	buffFile = fopen("buffFile.txt","w+");
	tempFile = fopen("tempFile.txt","r");
	while(!feof(tempFile)){
		//从tempFile中开始读取 
		ch = getc(tempFile);
		//如果是EOF说明读完了 
		if(ch == EOF)	break;
		//赋给buffFile
		putc(ch,buffFile); 
	}
	//用完文件就关好习惯
	fclose(tempFile); 
	//由于加入了一个字符，光标应该要往后一个
	cursorBegin++;
	cursorTail++; 
}

void Delete() 
{
	//一个过渡缓冲文件 
	FILE *tempFile = fopen("tempFile.txt","w");
	//如果光标在文件头，直接返回 
	if(cursorTail == 0)	return;
	//如果光标未选中，将光标头前移一个，默认删除前一个 
	if(cursorBegin == cursorTail)	cursorBegin--;
	char ch = 1;//缓冲字符 
	int i = 0;//计数光标位置 
	while( !feof(buffFile)){
		//如果碰到选中区域，直接跳过 
		if( i == cursorBegin ){
			i = cursorTail;
			continue;
		}
		//每一次都刷新一下文件光标，确保要读取的是需要的字符 
		fseek(buffFile,i,0);
		//读取buff File中的字符 
		ch = fgetc(buffFile);
		//判断一下，如果是EOF说明读完了
		if(ch == EOF)	break; 
		//输出给temp 
		fputc(ch,tempFile);
		//手动将光标后移 
		i++;
	}
	//将buffFile刷新一遍，将temp的内容读进去 
	fclose(tempFile);
	fclose(buffFile);
	buffFile = fopen("buffFile.txt","w+");
	tempFile = fopen("tempFile.txt","r");
	while(!feof(tempFile)){
		//从tempFile中开始读取 
		ch = getc(tempFile);
		//如果是EOF说明读完了 
		if(ch == EOF)	break;
		//赋给buffFile
		putc(ch,buffFile); 
	}
	//用完文件就关好习惯
	fclose(tempFile); 
	//将光标末尾和光标头统一（因为中间的已经删除）
	cursorTail = cursorBegin;	
}
}
 
*/ 
void Paste() 
{
	if(cursorBegin < cursorTail)	Delete();
	//打开剪切板文件
	clipBoard = fopen("clipBoard.txt","r");
	//把剪切板里的文件加入到buffFile中去
	char ch;//过渡字符 
	while(!feof(clipBoard)){
		ch = fgetc(clipBoard);
		if(ch == EOF)	break;//EOF说明读完了 
		//把这个字符给buffFile读进去 
		Write( ch); 
	}
	//文件用完就关好习惯
	fclose(clipBoard); 
}


6.Text函数

/*
Test函数
 
 1.无需要输入的变量：
 2.无返回值 
 3.实现的功能，将buffFile中的内容打印在框内 ，并把首位光标表现出来
 4.需要用到的函数：辅助函数：
                        drawLighting();//画出选中的加亮
			drawCursor();//画光标
   需要用到的全局变量：FILE *buffFile;
   					int cursorBegin;
   					int cursorTail;
                    int rawMax;
                    int charCount[1000];
                    double width;
                    double height;
                    double textwidth;//两个字之间的左右距离
                    double textheight;//两个字之间的上下
                    int k;char* color[];//color[k]就是当前字体的颜色
 5.待优化的功能 
 		填充有点问题，无法填充 

 6.测试函数 
#include<stdio.h>
#include<stdlib.h>
#include "imgui.h"
#include "graphics.h"

void Text();
int Count();
void drawLighting();
void drawCursor();


FILE *buffFile;
int cursorBegin;
int cursorTail;
int rawMax;
int charCount[1000];
double width;
double height;
double f;
double textwidth;//两个字之间的左右距离
double textheight;//两个字之间的上下
int k;char* color[] = {"Black","Red"};//color[k]就是当前字体的颜色
                    
void Main(){
	InitGraphics();
	InitConsole();
	k = 0;
	buffFile = fopen("buffFile.txt","a+");
	cursorBegin = 1;
	cursorTail = 2;
	rawMax = Count();
	width = 1;
	height = 15;
	f = 3;
	textwidth = 1;
	textheight = 1;
	Text();
} 

int Count(){
        //这个是每一行的计数个数
        int i = 0;
        //这个是在数行
        int j = 1;
        //开始数
        fseek(buffFile,0,0);
        //过度字符
        char ch = 1;
        while(!feof(buffFile)){
            ch = fgetc(buffFile);
            //如果字符为EOF，就说明结束了
            if( ch == EOF){
                charCount[j] = i;
                return j;
            }
            //如果字符为\n，说明该跳转下一行了
            else if( ch == '\n'){
                //赋值
                charCount[j] = i;
                //计数清零
                i = 0;
                //行数跳转下一个
                j++;
            }
            //其他情况计数+1
            else    i++;
        }
    //如果因为读取到文件末尾了，也说明结束了
    charCount[j] = i;
    return j;
    }
*/


void Text(){
    //X的坐标原点
	int X_zero = width / 10;
    //Y的坐标原点
    int Y_zero =  height - f * 3 ;
    //光标的位置，便于实现光标
    int count = 0;
    //判断，如果是选中的字符串的话，后面加个背景
    int judgeChosen = 0;
    //临时字符中转
    int tempChar[2] = {'a','\0'};
    
    int i;
    for( i = 1;i <= rawMax; i++){
    	int j;
    	//printf("%s","Now is fine");
        for( j = 0; j <= charCount[i] ;j++){
            //根据光标在文本中的位置，把笔放到不同的位置上
            MovePen( X_zero + j * textwidth, Y_zero - i * textheight);
            //把笔设计好，分两类，count在不在光标内
            if( count >= cursorBegin && count <= cursorTail )   judgeChosen = 1;
            else    judgeChosen = 0;
            
            //读一下文件里的字符
            fseek(buffFile,count,0); 
            tempChar[0] = fgetc(buffFile);
            //这是个填补条件，因为我发现用dev的话，换行算两个字符 
            if(tempChar[0] == '\n')	count++;

            //如果是选中的，就在后面画个格子，突出嘛
            if( judgeChosen)	drawLighting();
            
            //先放着吧，写个字（写字,暂时就用DrawTextString把，我想换成更简单的。。。。
            //看不透，不换了，就这个吧,\n也打，但是没啥用 
            //颜色改回来
            SetPenColor(color[k]);
            DrawTextString( tempChar);   
			         
	    	//画光标
            if( count == cursorTail + 1)    drawCursor();
            //数数加一个
            count ++;
        } 
    }
}



void drawLighting(){
    //选好背景色
    SetPenColor("Yellow");
    //打开填充
    //StartFilledRegion(1);
    //填充
    DrawLine(textwidth,0);
    DrawLine(0,textheight);
    DrawLine(-textwidth,0);
    DrawLine(0,-textheight);
    //把填充模式关闭
    //EndFilledRegion();
    return;
}

void drawCursor(){
    //选好背景色
    SetPenColor("Black");
    //打开填充
    //StartFilledRegion(1);
    //填充
    DrawLine(0.1,0);
    DrawLine(0,textheight);
    DrawLine(-0.1,0);
    DrawLine(0,-textheight);
    //把填充模式关闭
    //EndFilledRegion();
    return;
}
