1.命名规范

1.1变量命名
命名采用英文单词或其组合，其中，采取camelCase的命名规则，组合的时候第二个单词开始首字母大写（如helpContinue,gameAllow)，同一类的命名用_区分（如Menu_1,Menu_2,Menu_3等）命名时同类的变量尽量采用类似的命名表面关系（如GetName，SetName）

1.2文件
文件采用英文单词命名，不能用拼音，不能全部大写。不能采用系统已有的命名，文件名尽可能突出所实现的功能。
每个.c配备一个同名的.h文件作以说明（主要是函数功能声明及其注释；include“.c“；配备DEFINE保护头；

1.3函数
函数采用动宾结构命名，表面函数实现的功能，采用首字母大写的形式，不采用下划线。

2.注释风格
单行注释或后附注释使用//，多行注释只使用/**/
例：
//这是一段注释
int main
//这个函数用于实现减法
int minimize(int a,int b){
contain……； //这是内容
}
/* 
* 这是很长一段注释
* 第二行
* 第三行
* 第四行
*/
注释长度不长于15个字或10个英文单词，超出必须换行
注释位置应与代码相邻，位于代码上方
注释仅说明使用功能，不介绍方法，尽量简洁
定义函数的注释应包含：1.输入变量类型及其意义；2.返回值变量类型及其意义；3.函数调用实现功能（包括对全局变量的改变，输入指针的改变和其他的影响）;4.函数所用到的库
（不包括stdio.h;stdlib.h;string.h;math.h)
变量的注释应包含：1.变量的作用范围；2.被调用场景；3.变量取值的意义
其他注释应包含：具体功能及意义
3.程序板式

3.1过长或具有并列意义的语句应当拆分并对齐
例：
static char * menuListSet[] = {" 设置", 
" 开始 | Ctrl-W", 
" 暂停 | Ctrl-E",
" 加速 | Ctrl-R",
" 减速 | Ctrl-T",
" 退出 | Ctrl-Y"};
If((very_long_variable1 >= very_long_variable2)
&&(very_long_variable3>=very_long_variable4)
&&(very_long_variable5>=very_long_variable6))
{
DoSomething();
}

3.2缩进与对齐
仅使用tab键进行文件的对齐，用缩进体现代码结构。

3.3空格的使用
"if" "while" "catch" "for"等关键字后留一个空格
例： if (){} ✅ if(){};❌
逗号,分号之后要留空格，括号两边应该空格
例：for ( int i=0; i<=n; i++ )
函数名后不留空格，与关键字区分
例：DoSomething(); ✅ Dosomething ();❌

3.4空行的使用
每个函数之间空行，一个函数题内逻辑密切的地方不空行，其余地方应该空行

3.5函数的声明与定义
函数参数按先输入参数后输出参数的顺序进行。

3.6if的使用
if语句如果仅有一句，可以直接加在if条件句后面，若大于一句，则必须紧跟大括号，且大括号的前一个比较空行在下面。
例：
if () DoSomething();
if ()
{
DoSomething();
Else();
}
else语句缺省的时候可以省略，但是应该加一个空行以示结束。
例：
if ( something )
{
DoSomething();
}
Other;

3.7switch语句的使用
switch中的case语句尽可能缩短为一句，使用函数或改变少数全局变量的形式来实现功能。而且每个case语句后面必须加入break；

3.8循环语句
同if语句

4.预处理
每个.h文件头必须加入保护文件头
预处理不缩行

5.全局变量
所有全局变量放到共享文件的全局变量库中，并包含定义文件位置，意义。

